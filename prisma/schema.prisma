//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "sqlite"
    url = "file:./dev.db"
}

generator js {
    provider = "prisma-client-js"
}

/// @@deny('all', auth() == null)
/// @@allow('create', true)
/// @@allow('read', members ? [user == auth()])
/// @@allow('update,delete', members ? [user == auth() && role == 'ADMIN'])
model Space {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    name String
    /// @regex('^[0-9a-zA-Z]{4,16}$')
    slug String @unique()
    members SpaceUser[]
    lists List[]
}

/// @@deny('all', auth() == null)
/// @@allow('create,update,delete', space.members ? [user == auth() && role == 'ADMIN'])
/// @@allow('read', space.members ? [user == auth()])
model SpaceUser {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int
    role String @default("USER")

    @@unique([userId, spaceId])
}

/// @@allow('create', true)
/// @@allow('all', auth() == this)
/// @@allow('read', spaces ? [space.members ? [user == auth()]])
model User {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @email
    email String @unique()
    /// @password
    /// @omit
    password String?
    name String?
    spaces SpaceUser[]
    lists List[]
    todos Todo[]
}

/// @@deny('all', auth() == null)
/// @@allow('read', owner == auth() || (space.members ? [user == auth()] && !private))
/// @@allow('create,update', owner == auth() && space.members ? [user == auth()])
/// @@allow('delete', owner == auth())
model List {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId Int
    /// @deny('update', true)
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId Int
    title String
    private Boolean @default(false)
    todos Todo[]
}

/// @@deny('all', auth() == null)
/// @@allow('all', list.owner == auth())
/// @@allow('all', list.space.members ? [user == auth()] && !list.private)
model Todo {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @deny('update', true)
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId Int
    list List @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId Int
    title String
    completedAt DateTime?
}