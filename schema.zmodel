datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator js {
  provider = "prisma-client-js"
}

plugin markdown {
  provider = './dist/markdown-plugin'
  title = 'My Awesome Todo App'
  description = 'A multi-tenant Todo application built with ZenStack.'
}

plugin openapi {
  provider = "@zenstackhq/openapi"
  output = "todo-api.json"
  title = "My Todo API"
  version = "1.0.0"
  flavor = "rpc"
}

// where users can collaborate on todo lists and items
model Space {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  slug String @unique @regex('^[0-9a-zA-Z_\-]{4,16}$')
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int
  members SpaceUser[]
  lists List[]

  // require login
  @@deny('all', auth() == null)

  // everyone can create a space
  @@allow('create', true)

  // users in the space can read the space
  @@allow('read', members?[user == auth()])

  // space admin can update and delete
  @@allow('update,delete', members?[user == auth() && role == 'ADMIN'])
}

// a join table for many-to-many relation between `Space` and `User`
model SpaceUser {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role String @default("USER")

  @@unique([userId, spaceId])

  // require login
  @@deny('all', auth() == null)

  // space owner and admins have full access
  @@allow('all', space.owner == auth() || space.members?[user == auth() && role == 'ADMIN'])

  // user can read members of spaces that he's a member of
  @@allow('read', space.members?[user == auth()])
}

// user
model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique @email
  password String? @password @omit
  name String?
  spaces SpaceUser[] // user's space membership
  lists List[]
  todos Todo[]
  ownedSpaces Space[] // spaces owned by the user

  // everyone can sign up
  @@allow('create', true)

  // full access by oneself
  @@allow('all', auth() == this)

  // can be read by users sharing any space
  @@allow('read', spaces?[space.members?[user == auth()]])
}

// todo list
model List {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId Int
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int @deny('update', true)
  title String
  private Boolean @default(false)
  todos Todo[]

  // require login
  @@deny('all', auth() == null)

  // can be read by space members if not private
  @@allow('read', owner == auth() || (space.members?[user == auth()] && !private))

  // when create, owner must be set to current user, and user must be in the space
  @@allow('create,update', owner == auth() && space.members?[user == auth()])

  // can be deleted by owner
  @@allow('delete', owner == auth())
}

// todo item
model Todo {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int @deny('update', true)
  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId Int
  title String
  completedAt DateTime?

  // require login
  @@deny('all', auth() == null)

  // owner has full access
  @@allow('all', list.owner == auth())

  // space members have full access if the parent List is not private
  @@allow('all', list.space.members?[user == auth()] && !list.private)
}